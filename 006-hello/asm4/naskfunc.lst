     1 00000000                                 ; haribote-os
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]	;制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]	;32位汇编
     6 00000000                                 [BITS 32]			;制作32位模式用的机器语言
     7 00000000                                 
     8 00000000                                 ;制作目标文件的信息
     9 00000000                                 
    10 00000000                                 [FILE "naskfunc.nas"]	;源文件名称信息
    11 00000000                                 	global _io_hlt,_write_mem8
    12 00000000                                 	global _io_cli,_io_sti,_io_stihlt
    13 00000000                                 	global _io_in8,_io_in16,_io_in32
    14 00000000                                 	global _io_out8,_io_out16,_io_out32
    15 00000000                                 	global _io_load_eflags,_io_store_eflags
    16 00000000                                 	global _load_gdtr,_load_idtr
    17 00000000                                 	global _asm_inthandler21, _asm_inthandler2c, _asm_inthandler20
    18 00000000                                 	global _load_cr0, _store_cr0
    19 00000000                                 	global _memtest_sub
    20 00000000                                 	
    21 00000000                                 	extern _inthandler21,_inthandler2c,_inthandler20	;;int.c中定义的函数
    22 00000000                                 	
    23 00000000                                 ;具体的函数实现
    24                                          [section .text]
    25 00000000                                 
    26 00000000                                 _io_hlt:	;void io_hlt(void)
    27 00000000 F4                              	hlt
    28 00000001 C3                              	ret
    29 00000002                                 	
    30 00000002                                 _write_mem8: ;void write_mem8(int addr,int data)
    31 00000002 8B 4C 24 04                     	mov ecx,[esp+4]	;获取addr
    32 00000006 8A 44 24 08                     	mov al,[esp+8]	;获取data，尽量使用32位寄存器，此时使用16的速度会更慢
    33 0000000A 88 01                           	mov [ecx],al
    34 0000000C C3                              	ret
    35 0000000D                                 	
    36 0000000D                                 _io_cli:
    37 0000000D FA                              	cli
    38 0000000E C3                              	ret
    39 0000000F                                 	
    40 0000000F                                 _io_sti:
    41 0000000F FB                              	sti
    42 00000010 C3                              	ret
    43 00000011                                 
    44 00000011                                 _io_stihlt:
    45 00000011 FB                              	sti
    46 00000012 F4                              	hlt
    47 00000013 C3                              	ret
    48 00000014                                 	
    49 00000014                                 _io_in8:
    50 00000014 8B 54 24 04                     	mov edx,[esp+4]
    51 00000018 B8 00000000                     	mov eax,0
    52 0000001D EC                              	in al,dx		;ax作为返回值传递
    53 0000001E C3                              	ret
    54 0000001F                                 	
    55 0000001F                                 _io_in16:
    56 0000001F 8B 54 24 04                     	mov edx,[esp+4]
    57 00000023 B8 00000000                     	mov eax,0
    58 00000028 66 ED                           	in ax,dx		;ax作为返回值传递
    59 0000002A C3                              	ret
    60 0000002B                                 
    61 0000002B                                 _io_in32:
    62 0000002B 8B 54 24 04                     	mov edx,[esp+4]
    63 0000002F B8 00000000                     	mov eax,0
    64 00000034 ED                              	in eax,dx		;ax作为返回值传递
    65 00000035 C3                              	ret
    66 00000036                                 	
    67 00000036                                 _io_out8:
    68 00000036 8B 54 24 04                     	mov edx,[esp+4]
    69 0000003A 8B 44 24 08                     	mov eax,[esp+8]
    70 0000003E EE                              	out dx,al
    71 0000003F C3                              	ret
    72 00000040                                 	
    73 00000040                                 _io_out16:
    74 00000040 8B 54 24 04                     	mov edx,[esp+4]
    75 00000044 8B 44 24 08                     	mov eax,[esp+8]
    76 00000048 66 EF                           	out dx,ax
    77 0000004A C3                              	ret
    78 0000004B                                 	
    79 0000004B                                 _io_out32:
    80 0000004B 8B 54 24 04                     	mov edx,[esp+4]
    81 0000004F 8B 44 24 08                     	mov eax,[esp+8]
    82 00000053 EF                              	out dx,eax
    83 00000054 C3                              	ret
    84 00000055                                 	
    85 00000055                                 _io_load_eflags:
    86 00000055 9C                              	pushfd	;push eflags
    87 00000056 58                              	pop eax
    88 00000057 C3                              	ret
    89 00000058                                 	
    90 00000058                                 _io_store_eflags:
    91 00000058 8B 44 24 04                     	mov eax,[esp+4]
    92 0000005C 50                              	push eax
    93 0000005D 9D                              	popfd ; pop eflags
    94 0000005E C3                              	ret
    95 0000005F                                 	
    96 0000005F                                 _load_gdtr: ;void load_idtr(int limit, int addr)
    97 0000005F 66 8B 44 24 04                  	mov ax,[esp+4]	;limit,16位
    98 00000064 66 89 44 24 06                  	mov [esp+6],ax	;将16位的limit放到esp+6开始的两个字节，之后的四个字节是addr
    99 00000069 0F 01 54 24 06                  	lgdt [esp+6]	;mem to gdtr，将48位放入到寄存器中
   100 0000006E C3                              	ret
   101 0000006F                                 	
   102 0000006F                                 _load_idtr:		; void load_idtr(int limit, int addr);
   103 0000006F 66 8B 44 24 04                  	MOV		AX,[ESP+4]		; limit
   104 00000074 66 89 44 24 06                  	MOV		[ESP+6],AX
   105 00000079 0F 01 5C 24 06                  	LIDT	[ESP+6]
   106 0000007E C3                              	RET
   107 0000007F                                 
   108 0000007F                                 _asm_inthandler20: ;
   109 0000007F 06                              	push es		;中断处理前保存寄存器状态
   110 00000080 1E                              	push ds	
   111 00000081 60                              	pushad		;将EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI压栈
   112 00000082 89 E0                           	mov eax,esp
   113 00000084 50                              	push eax	;栈顶压栈
   114 00000085 66 8C D0                        	mov ax,ss
   115 00000088 8E D8                           	mov ds,ax
   116 0000008A 8E C0                           	mov es,ax
   117 0000008C E8 [00000000]                   	call _inthandler20
   118 00000091 58                              	pop eax
   119 00000092 61                              	popad
   120 00000093 1F                              	pop ds
   121 00000094 07                              	pop es
   122 00000095 CF                              	iretd
   123 00000096                                 
   124 00000096                                 _asm_inthandler21: ;
   125 00000096 06                              	push es		;中断处理前保存寄存器状态
   126 00000097 1E                              	push ds	
   127 00000098 60                              	pushad		;将EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI压栈
   128 00000099 89 E0                           	mov eax,esp
   129 0000009B 50                              	push eax	;栈顶压栈
   130 0000009C 66 8C D0                        	mov ax,ss
   131 0000009F 8E D8                           	mov ds,ax
   132 000000A1 8E C0                           	mov es,ax
   133 000000A3 E8 [00000000]                   	call _inthandler21
   134 000000A8 58                              	pop eax
   135 000000A9 61                              	popad
   136 000000AA 1F                              	pop ds
   137 000000AB 07                              	pop es
   138 000000AC CF                              	iretd		;从堆栈弹出返回的偏移和段地址，再弹出标志寄存器内容
   139 000000AD                                 	
   140 000000AD                                 _asm_inthandler2c: ;
   141 000000AD 06                              	push es		;中断处理前保存寄存器状态
   142 000000AE 1E                              	push ds	
   143 000000AF 60                              	pushad		;将EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI压栈
   144 000000B0 89 E0                           	mov eax,esp
   145 000000B2 50                              	push eax	;栈顶压栈
   146 000000B3 66 8C D0                        	mov ax,ss
   147 000000B6 8E D8                           	mov ds,ax
   148 000000B8 8E C0                           	mov es,ax
   149 000000BA E8 [00000000]                   	call _inthandler2c
   150 000000BF 58                              	pop eax
   151 000000C0 61                              	popad
   152 000000C1 1F                              	pop ds
   153 000000C2 07                              	pop es
   154 000000C3 CF                              	iretd
   155 000000C4                                 	
   156 000000C4                                 _load_cr0: ; int load_cr0();
   157 000000C4 0F 20 C0                        	mov eax,cr0
   158 000000C7 C3                              	ret
   159 000000C8                                 
   160 000000C8                                 _store_cr0: ; void store_cr0(int )
   161 000000C8 8B 44 24 04                     	mov eax,[esp+4]
   162 000000CC 0F 22 C0                        	mov cr0,eax
   163 000000CF C3                              	ret
   164 000000D0                                 
   165 000000D0                                 _memtest_sub: ; unsigned int memtest_sub(uint place);
   166 000000D0 57                              	push edi
   167 000000D1 56                              	push esi
   168 000000D2 53                              	push ebx
   169 000000D3 8B 5C 24 10                     	mov ebx,[esp+12+4]		;push 3 registers
   170 000000D7 BE AA55AA55                     	mov esi,0xaa55aa55
   171 000000DC BF 55AA55AA                     	mov edi,0x55aa55aa
   172 000000E1                                 	
   173 000000E1 8B 03                           	mov eax,[ebx]	; old = *(place)
   174 000000E3 89 33                           	mov [ebx],esi
   175 000000E5 83 33 FF                        	XOR	DWORD [EBX],0xffffffff	; XOR
   176 000000E8 3B 3B                           	cmp edi,[ebx]		; if (!=)
   177 000000EA 75 12                           	jne	mts_failed
   178 000000EC 83 33 FF                        	XOR	DWORD [EBX],0xffffffff	; XOR
   179 000000EF 3B 33                           	cmp esi,[ebx]		; if (!=)
   180 000000F1 75 0B                           	jne	mts_failed			
   181 000000F3                                 
   182 000000F3                                 	;success:	return 1
   183 000000F3 89 03                           	mov [ebx],eax
   184 000000F5 B8 00000001                     	mov eax,1
   185 000000FA 5B                              	POP	ebx
   186 000000FB 5E                              	POP	esi
   187 000000FC 5F                              	POP	edi
   188 000000FD C3                              	ret
   189 000000FE                                 	
   190 000000FE                                 mts_failed:		; return 0
   191 000000FE 89 03                           	mov [ebx],eax
   192 00000100 B8 00000000                     	mov eax,0
   193 00000105 5B                              	POP	ebx
   194 00000106 5E                              	POP	esi
   195 00000107 5F                              	POP	edi
   196 00000108 C3                              	ret
   197 00000109                                 	
   198 00000109                                 	
   199 00000109                                 	
   200 00000109                                 	
   201 00000109                                 	
